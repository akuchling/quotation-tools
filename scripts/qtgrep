#!/usr/bin/env python3
#
# qtgrep
# Copyright 2002, 2013 Andrew M. Kuchling
#
# Search through a QEL document for a given regular expression, and outputs
# a new QEL document containing the matching quotations.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

import sys, re, argparse
import qel
from qel.parse import parse
from qel.quotation import Collection, Text

__doc__ = """Usage: %s [options] file1.xml file2.xml ...
If no filenames are provided, standard input will be read.
""" % sys.argv[0]


def filename(file):
    """Return the file's name; 'file' is either a string which is just
    returned as-is, or sys.stdin.
    """
    if file is sys.stdin: return '<stdin>'
    else: return file

def main():
    # Process the command-line arguments
    parser = argparse.ArgumentParser(description="Search one or more QEL files")
    parser.add_argument('pattern', metavar='PATTERN',
                        help='regex pattern for search')
    parser.add_argument('files', metavar='FILE', nargs='*',
                        default=[sys.stdin],
                        help="files to search")
    parser.add_argument('-c', '--count', dest='count', action='store_true',
                        default=False,
                        help='only display the number of matches per file')
    args = parser.parse_args()

    pattern = re.compile(args.pattern, re.IGNORECASE)

    # Loop over the input files; use sys.stdin if no files are specified
    if len(args.files) == 0:
        files = [sys.stdin]
    else:
        files = args.files

    encoding = sys.getdefaultencoding()
    coll = Collection()

    for file in files:
        if isinstance(file, str):
            stream = open(file, 'r')
        else:
            stream = file
        qtlist = parse(stream)
        matches = 0
        for qt in qtlist:
            if qt.is_matching_regex(pattern):
                if args.count:
                    matches += 1
                else:
                    # Default is to print the quotations
                    coll.append(qt)

        # File completed
        if args.count:
            print(filename(file),':',matches)

    if not args.count:
        xml = coll.as_xml(encoding='UTF-8')
        sys.stdout.buffer.write(xml.encode('UTF-8'))


if __name__ == '__main__':
    main()
