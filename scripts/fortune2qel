#!/usr/bin/env python3
#
# fortune2qel
# Copyright (C) 2002 A.M. Kuchling
#
# Attempts to convert quotations from fortune to QEL format.
#
# This script doesn't try to be complete, since the files distributed
# with fortune include all sorts of wackiness.  It'll be hopeless on
# things like ASCII art, and limits itself to quotations that
# appear to have an attribution.  This is determined by looking for
# final lines that start with '\s+--'; the contents of this line and
# any following lines are assumed to be the attribution, which will be
# used as the contents of the <source> element.  (No attempt is made to
# parse this into author and title, as this seems too difficult and
# error-prone.)  The rest of the quotation is broken into paragraphs
# and forms the body of the <quotation> element.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

import sys, re
from xml.sax import saxutils

import qel

__revision__ = "$Id: fortune2qel,v 1.4 2002/09/29 23:50:44 akuchling Exp $"

import sys, getopt

__doc__ = """Usage: %s [file1 file2 ...]
If no filenames are provided, standard input will be read.
""" % sys.argv[0]

def read_quotation(input):
    """Read a quotation from a fortune file, returning a list of lines.
    """

    L = []
    while 1:
        line = input.readline()
        if line == "" or line == "%\n":
            break
        L.append(line)

    if len(L) == 0: return None
    return L


def normalize_whitespace(S):
    "Remove extra whitespace from a string"
    S = re.sub('\s+', ' ', S)
    return S.strip()

def convert_formatting(S):
    """Convert physical formatting to QEL markup.  This assumes that
    the string has already been run through saxutils.escape();
    otherwise the angle brackets inserted into the markup would get
    escaped.
    """

    # Look for some character sequences used to represent accented
    # characters.
    S = S.replace('^\x08e', '&ecirc;')

    # Strip out ^H characters used to do underlining
    while '\x08' in S:
        S = re.sub( '.\x08', '', S)

    # Strip out bell characters, too.
    S = S.replace('\x07', '')

    # Insert markup
    S = re.sub( '[*](.*?)[*]', r'<em>\1</em>', S)

    return S


def convert_quotation(L):
    """Convert a quotation represented as a list of lines into QEL and
    print it to stdout.
    """

    # First, look for an attribution.  This is found by looking for
    # the last line that starts with some whitespace and the
    # characters '--'.
    for i in range(len(L)-1, -1, -1):
        m = re.match('^\s+-- ', L[i])
        if m is not None:
            break
    else:
        return None

    # 'L' is a list of strings containing the body of the quotation,
    # and 'attribution' is a single string containing the quotation's
    # source.
    L[i] = L[i][ m.end(): ]
    attribution = ' '.join(L[i:])
    attribution = normalize_whitespace(attribution)
    L = L[:i]

    # Divide the list 'L' into a list of paragraphs; each paragraph
    # is a list of strings.
    #
    # XXX This isn't quite complete yet.  Some multiparagraph quotations,
    # usually ones quoting dialogue, don't put any whitespace at the
    # start of each paragraph.  Instead they have a speaker's name
    # followed by a colon.
    paragraphs = []
    start = 0
    for i in range(len(L)):
        if i>0 and re.match('^\s+', L[i]) is not None:
            paragraphs.append( L[start:i] )
            start = i
    paragraphs.append( L[start:] )

    # Convert each paragraph into a string and remove extra
    # whitespace.
    paragraphs = [ normalize_whitespace( ' '.join(para) )
                   for para in paragraphs ]
    paragraphs = [_f for _f in paragraphs if _f]

    # If there are no paragraphs at all, presumably the quotation is
    # malformed in some way, so we return without printing anything.
    if len(paragraphs) == 0:
        return

    # Some single-paragraph quotations are surrounded by quotation
    # marks, which is silly; this will remove them if present.
    if (len(paragraphs) == 1 and
        paragraphs[0][0] == paragraphs[0][-1] == '"'):
        paragraphs[0] = paragraphs[0][1:-1]

    # Output a QEL <quotation> element containing this quote.
    print('  <quotation>')
    for para in paragraphs:
        para = saxutils.escape(para)
        para = convert_formatting(para)
        print('    <p>%s</p>' % para)

    # Ensure the first character of the attribution is capitalized.
    attribution = attribution[0].upper() + attribution[1:]
    attribution = saxutils.escape(attribution)

    print('    <source>%s</source>' % convert_formatting(attribution))
    print('  </quotation>\n\n')


def main():
    args = sys.argv[1:]
    if len(args) == 0: args = [sys.stdin]

    encoding = 'ISO-8859-1'
    print(qel.QEL_HEADER % encoding)

    for file in args:
        if isinstance(file, str):
            input = open(file, 'r')
        else:
            input = file

        while 1:
            quote = read_quotation(input)
            if quote is None:
                break

            convert_quotation( quote )

    print(qel.QEL_FOOTER)

if __name__ == '__main__':
    main()
