#!/usr/bin/env python3
#
# qtmerge
# Copyright 2002, 2013 Andrew M. Kuchling
#
# Script for merging two or more QEL files together
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

import sys, argparse, time
import qel
from qel import scripts
from qel.quotation import Collection
from qel.parse import parse

__doc__ = """%s [options] file1 file2 ...
Merge the QEL files 'file1', 'file2', and output the resulting QEL file
to stdout.
Options: --strict     Abort if two quotations have the same ID (default)
         --loose      Generate new ID if two quotations have the same ID
""" % sys.argv[0]

def main():
    # Parse options
    parser = argparse.ArgumentParser(description="Merge multiple QEL files")
    parser.add_argument('files', metavar='FILE', nargs='+',
                        help="files to merge")
    parser.add_argument('--strict', dest='strict', action='store_true',
                        default=True,
                        help='Abort if two quotations have the same ID (default)')
    parser.add_argument('--loose', dest='strict', action='store_false',
                        help='Generate new ID if two quotations have the same ID')
    parser.add_argument('--generate', dest='generate', action='store_true',
                        default=False,
                        help='Generate new ID if quotation lacks an ID')
    args = parser.parse_args()

    if len(args.files) == 0:
        parser.print_help()
        sys.exit(1)

    coll = Collection()

    # Merge the listed files
    collections = []
    attrs = {}
    for filename in args.files:
        with open(filename, 'r') as stream:
            coll = parse(stream)
            collections.append(coll)

            # Record collection attributes if they're present.
            for attr in ('title', 'description', 'editor'):
                if (getattr(coll, attr, None)):
                    attrs[attr] = getattr(coll, attr)

    try:
        coll = scripts.merge(*collections, strict=args.strict,
                             generate=args.generate)
    except scripts.DuplicateIDException as exc:
        sys.stderr.write('%s:%s\n' % (filename, str(exc)))
        sys.exit(2)

    # Add collection attributes
    for k, v in attrs.items():
        setattr(coll, k, v)

    # Output the resulting merged collection as XML.
    encoding = sys.getdefaultencoding()
    xml = coll.as_xml(encoding=encoding)
    sys.stdout.buffer.write(xml.encode(encoding))

if __name__ == '__main__':
    main()
